//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TestEntities : DbContext
    {
        public TestEntities()
            : base("name=TestEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblProduct> tblProducts { get; set; }
    
        public virtual ObjectResult<Nullable<int>> IFExist(Nullable<int> action, string name)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("IFExist", actionParameter, nameParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InserProduct(string name, Nullable<decimal> price, Nullable<long> quantity, string isGstApplicable, Nullable<System.DateTime> purchaseDate, Nullable<System.DateTime> expiryDate, string color)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(long));
    
            var isGstApplicableParameter = isGstApplicable != null ?
                new ObjectParameter("IsGstApplicable", isGstApplicable) :
                new ObjectParameter("IsGstApplicable", typeof(string));
    
            var purchaseDateParameter = purchaseDate.HasValue ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var colorParameter = color != null ?
                new ObjectParameter("color", color) :
                new ObjectParameter("color", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InserProduct", nameParameter, priceParameter, quantityParameter, isGstApplicableParameter, purchaseDateParameter, expiryDateParameter, colorParameter);
        }
    }
}
